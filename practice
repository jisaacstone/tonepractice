#!/usr/bin/env elixir

{file_name, questions} = case System.argv do
  [file_name, questions] -> {file_name, String.to_integer(questions)}
  [file_name] -> {file_name, 10}
  _ -> IO.puts("usage: practice file_name [num_questions]") && exit(:normal)
end

processinput = fn
  ("\n", _, _, result) -> {:continue, result}
  ("q" <> _, _, _, result) -> {:stop, result}
  (" " <> rest, tones, lp, result) -> lp.(rest, tones, lp, result)
  (input, [{tones,pinyin}|tail], lp, {correct,total}) ->
    size = byte_size(tones)
    case String.split_at(input, size) do
      {^tones, rest} ->
        IO.write(" \e[32m#{pinyin}\e[m")
        lp.(rest, tail, lp, {correct + size, total + size})
      {_, rest} ->
        IO.write(" \e[31m#{pinyin}\e[m")
        lp.(rest, tail, lp, {correct, total + size})
    end
  (eh?, [], _, result) ->
    IO.write("unexpected #{eh?}\n")
    {:continue, result}
  (eh?, state, _, _) -> exit({:oops, eh?, state})
end

getuserinput = fn
  (tonedata) ->
    processinput.(IO.gets(">"), tonedata, processinput, {0,0})
end

endgame = fn
  ({_, 0, _}, _) -> :ok
  ({total, total, []}, _) ->
    IO.write("\e[33m#{total} of #{total}: 100%\e[m\n")
  ({correct, total, missed}, lp) ->
    IO.write("\e[33m#{correct} of #{total}: #{trunc(correct/total*100)}%\n")
    case IO.gets("[r]etry [q]uit?>") do
      "r" <> _ -> lp.(Enum.shuffle(missed), {0, 0, []}, lp)
      _ -> :ok
    end
end


loop = fn
  ([], score, lp) -> endgame.(score, lp)
  ([{hanzi, tonedata, english}=h|t], {totalcorrect, grandtotal, missed}, lp) ->
    IO.write("\e[37m#{hanzi}\n")
    case getuserinput.(tonedata) do
      {:stop, {correct, total}} ->
        IO.write("\n")
        endgame.({totalcorrect+correct, grandtotal+total, missed}, lp)
      {:continue, {total, total}} ->
        IO.write("\n#{english}\n")
        lp.(t, {totalcorrect+total,grandtotal+total,missed}, lp)
      {:continue, {correct, total}} ->
        IO.write("\n#{english}\n")
        lp.(t, {totalcorrect+correct,grandtotal+total,[h|missed]}, lp)
    end
end

parse = fn
  ([hanzi, tones, pinyin, english|_]) ->
    { Regex.replace(~r/\s+/, hanzi, " "),
      Enum.zip(String.split(tones), String.split(pinyin)),
      english }
  ([hanzi, tones, pinyin]) ->
    { Regex.replace(~r/\s+/, hanzi, " "),
      Enum.zip(String.split(tones), String.split(pinyin)),
      "" }
  (_) -> nil
end

<< a :: 32, b :: 32, c :: 32 >> = :crypto.rand_bytes(12)
:random.seed(a,b,c)

data = File.read!(file_name) |>
  String.split("\n\n") |>
  Stream.map(fn(str) -> parse.(String.split(str, "\n")) end) |>
  Stream.filter(&(&1 != nil)) |>
  Enum.shuffle() |>
  Enum.take(questions)

loop.(data, {0,0,[]}, loop)
